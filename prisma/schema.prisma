generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt

  email    String       @unique
  password String
  role     EnumUserRole @default(CONSUMER)

  name   String @default("User")
  avatar String @default("/uploads/default-av.png") @map("avatar_url")
  phone  String @default("")

  orders    Order[]
  reviews   Review[]
  favorites Product[]
  sessions  Session[]
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt

  name        String   @unique
  slug        String   @unique
  description String
  price       Int
  images      String[]

  orders  OrderItem[]
  reviews Review[]

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?      @map("category_id")

  users User[]
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt

  name String @unique
  slug String @unique

  products Product[]
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt

  rating Int
  text   String

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt

  status EnumOrderStatus @default(PENDING)

  items OrderItem[]

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt

  quantity Int
  price    Int

  order   Order? @relation(fields: [orderId], references: [id])
  orderId Int?   @map("order_id")

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")

  @@map("Order_item")
}

model Session {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt

  fingerprint String @unique
  token       String @unique
  userAgent   String @map("user_agent")

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")
}

enum EnumOrderStatus {
  PENDING
  PAYED
  SHIPPED
  DELIVERED
}

enum EnumUserRole {
  ADMIN
  MANAGER
  CONSUMER
}
